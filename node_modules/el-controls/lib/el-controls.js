'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Promise$1 = _interopDefault(require('broken'));
var esRaf = require('es-raf');
var El = _interopDefault(require('el.js/src'));
var index = require('es6-tween/src/index');
var currency = require('shop.js-util/src/currency');
var zepto = _interopDefault(require('zepto-modules/zepto'));
require('zepto-modules/event');
require('zepto-modules/ie');
require('zepto-modules/stack');
require('zepto-modules/selector');
var selectize = _interopDefault(require('es-selectize'));
var qrcodeLite = require('qrcode-lite');
var GMaps = _interopDefault(require('gmaps'));

// src/utils/patches.coffee

if (window.Promise == null) {
  window.Promise = Promise$1;
}

if (window.requestAnimationFrame == null) {
  window.requestAnimationFrame = esRaf.raf;
}

if (window.cancelAnimationFrame == null) {
  window.cancelAnimationFrame = esRaf.raf.cancel;
}

// src/events.coffee
var Events;

var Events$1 = Events = {
  Change: 'change',
  ChangeSuccess: 'change-success',
  ChangeFailed: 'change-failed'
};

// src/utils/valueOrCall.coffee
var valueOrCall;

var valueOrCall$1 = valueOrCall = function(valueOrFunc) {
  if (typeof valueOrFunc === 'function') {
    return valueOrFunc();
  }
  return valueOrFunc;
};

// src/controls/control.coffee
var Control, _controlId, scrolling,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

scrolling = false;

_controlId = 0;

var Control$1 = Control = (function(superClass) {
  extend(Control, superClass);

  function Control() {
    return Control.__super__.constructor.apply(this, arguments);
  }

  Control.prototype._controlId = 0;

  Control.prototype.name = null;

  Control.prototype.init = function() {
    Control.__super__.init.apply(this, arguments);
    return this._controlId = _controlId++;
  };

  Control.prototype.getId = function() {
    return this.tag + '-' + this._controlId;
  };

  Control.prototype.getName = function() {
    var ref;
    return (ref = valueOrCall$1(this.name)) != null ? ref : this.input.name.replace(/\\./g, '-');
  };

  Control.prototype.getValue = function(event$$1) {
    var ref;
    return (ref = event$$1.target.value) != null ? ref.trim() : void 0;
  };

  Control.prototype.error = function(err) {
    var elTop, rect, t, wTop;
    if (err instanceof DOMException) {
      console.log('WARNING: Error in riot dom manipulation ignored:', err);
      return;
    }
    Control.__super__.error.apply(this, arguments);
    rect = this.root.getBoundingClientRect();
    elTop = rect.top - window.innerHeight / 2;
    wTop = window.pageYOffset;
    if (this.scrollToError && !scrolling && elTop <= wTop) {
      scrolling = true;
      index.autoPlay(true);
      t = new index.Tween({
        x: wTop
      }).to({
        x: wTop + elTop
      }, 500, index.Easing.Cubic).on('update', function(arg) {
        var x;
        x = arg.x;
        return window.scrollTo(window.pageXOffset, x);
      }).on('complete', function() {
        scrolling = false;
        return index.autoPlay(false);
      }).start();
    }
    return this.mediator.trigger(Events$1.ChangeFailed, this.input.name, this.input.ref.get(this.input.name));
  };

  Control.prototype.change = function() {
    Control.__super__.change.apply(this, arguments);
    return this.mediator.trigger(Events$1.Change, this.input.name, this.input.ref.get(this.input.name));
  };

  Control.prototype.changed = function(value) {
    this.mediator.trigger(Events$1.ChangeSuccess, this.input.name, value);
    return El.scheduleUpdate();
  };

  Control.prototype.value = function() {
    return this.input.ref(this.input.name);
  };

  return Control;

})(El.Input);

// templates/controls/checkbox.pug
var html = "\n<yield from=\"input\">\n  <div class=\"input-container {invalid: errorMessage, valid: valid, labeled: label, checked: input.ref.get(input.name)}\">\n    <input id=\"{ getId() }\" name=\"{ getName() }\" type=\"checkbox\" onchange=\"{ change }\" onblur=\"{ change }\" checked=\"{ input.ref.get(input.name) }\">\n  </div>\n  <label for=\"getId()\"></label>\n</yield>\n<yield></yield>\n<yield from=\"label\">\n  <div class=\"label active\" if=\"{ label }\">{ label }</div>\n</yield>\n<yield from=\"error\">\n  <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n</yield>\n<yield from=\"instructions\">\n  <div class=\"helper\" if=\"{ instructions &amp;&amp; !errorMessage }\">{ instructions }</div>\n</yield>";

// src/controls/checkbox.coffee
var CheckBox,
  extend$1 = function(child, parent) { for (var key in parent) { if (hasProp$1.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp$1 = {}.hasOwnProperty;

var checkbox = CheckBox = (function(superClass) {
  extend$1(CheckBox, superClass);

  function CheckBox() {
    return CheckBox.__super__.constructor.apply(this, arguments);
  }

  CheckBox.prototype.tag = 'checkbox';

  CheckBox.prototype.html = html;

  CheckBox.prototype.getValue = function(event$$1) {
    return event$$1.target.checked;
  };

  return CheckBox;

})(Control$1);

CheckBox.register();

// src/utils/placeholder.coffee
var exports$1, hidePlaceholderOnFocus, unfocusOnAnElement;

hidePlaceholderOnFocus = function(event$$1) {
  var target;
  target = event$$1.currentTarget ? event$$1.currentTarget : event$$1.srcElement;
  if (target.value === target.getAttribute('placeholder')) {
    return target.value = '';
  }
};

unfocusOnAnElement = function(event$$1) {
  var target;
  target = event$$1.currentTarget ? event$$1.currentTarget : event$$1.srcElement;
  if (target.value === '') {
    return target.value = target.getAttribute('placeholder');
  }
};

exports$1 = function() {};

if (document.createElement("input").placeholder == null) {
  exports$1 = function(input) {
    var ref;
    input = (ref = input[0]) != null ? ref : input;
    if (input._placeholdered != null) {
      return;
    }
    Object.defineProperty(input, '_placeholdered', {
      value: true,
      writable: true
    });
    if (!input.value) {
      input.value = input.getAttribute('placeholder');
    }
    if (input.addEventListener) {
      input.addEventListener('click', hidePlaceholderOnFocus, false);
      return input.addEventListener('blur', unfocusOnAnElement, false);
    } else if (input.attachEvent) {
      input.attachEvent('onclick', hidePlaceholderOnFocus);
      return input.attachEvent('onblur', unfocusOnAnElement);
    }
  };
}

var placeholder = exports$1;

// templates/controls/text.pug
var html$1 = "\n<yield from=\"input\">\n  <div class=\"input-container {invalid: errorMessage, valid: valid, labeled: label}\">\n    <input id=\"{ getId() }\" name=\"{ getName() }\" type=\"{ type }\" onchange=\"{ change }\" onblur=\"{ change }\" riot-value=\"{ getText() }\" autocomplete=\"{ autocomplete }\" autofocus=\"{ autofocus }\" disabled=\"{ disabled }\" maxlength=\"{ maxlength }\" readonly=\"{ readonly }\" placeholder=\"{ placeholder }\">\n  </div>\n</yield>\n<yield from=\"label\">\n  <div class=\"label { active: getText() || placeholder }\" if=\"{ label }\">{ label }</div>\n</yield>\n<yield from=\"error\">\n  <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n</yield>\n<yield from=\"instructions\">\n  <div class=\"helper\" if=\"{ instructions &amp;&amp; !errorMessage }\">{ instructions }</div>\n</yield>\n<yield></yield>";

// src/controls/text.coffee
var Text,
  extend$2 = function(child, parent) { for (var key in parent) { if (hasProp$2.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp$2 = {}.hasOwnProperty;

var Text$1 = Text = (function(superClass) {
  extend$2(Text, superClass);

  function Text() {
    return Text.__super__.constructor.apply(this, arguments);
  }

  Text.prototype.tag = 'text';

  Text.prototype.html = html$1;

  Text.prototype.type = 'text';

  Text.prototype.formElement = 'input';

  Text.prototype.autocomplete = 'on';

  Text.prototype.autofocus = false;

  Text.prototype.disabled = false;

  Text.prototype.maxlength = null;

  Text.prototype.readonly = false;

  Text.prototype.placeholder = null;

  Text.prototype.label = '';

  Text.prototype.instructions = null;

  Text.prototype.init = function() {
    Text.__super__.init.apply(this, arguments);
    return this.on('mounted', (function(_this) {
      return function() {
        var el;
        el = _this.root.getElementsByTagName(_this.formElement)[0];
        if (_this.type !== 'password') {
          return placeholder(el);
        }
      };
    })(this));
  };

  Text.prototype.getText = function() {
    if (this.input == null) {
      return '';
    }
    return this.input.ref.get(this.input.name);
  };

  return Text;

})(Control$1);

Text.register();

// src/controls/readonly.coffee
var ReadOnly,
  extend$3 = function(child, parent) { for (var key in parent) { if (hasProp$3.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp$3 = {}.hasOwnProperty;

var ReadOnly$1 = ReadOnly = (function(superClass) {
  extend$3(ReadOnly, superClass);

  function ReadOnly() {
    return ReadOnly.__super__.constructor.apply(this, arguments);
  }

  ReadOnly.prototype.tag = 'readonly';

  ReadOnly.prototype.readonly = true;

  ReadOnly.prototype.text = '';

  ReadOnly.prototype.init = function() {
    if (!this.text) {
      return ReadOnly.__super__.init.apply(this, arguments);
    }
  };

  ReadOnly.prototype.getText = function() {
    var ref;
    return valueOrCall$1(this.text) || ((ref = this.input) != null ? ref.ref.get(this.input.name) : void 0) || '';
  };

  ReadOnly.prototype.change = function() {};

  ReadOnly.prototype._change = function() {};

  ReadOnly.prototype.getName = function() {};

  return ReadOnly;

})(Text$1);

ReadOnly.register();

// templates/controls/copy.pug
var html$2 = "\n<yield from=\"input\">\n  <div class=\"input-container {invalid: errorMessage, valid: valid, labeled: label}\">\n    <input id=\"{ getId() }\" name=\"{ getName() }\" type=\"{ type }\" onclick=\"{ copy }\" riot-value=\"{ getText() }\" autocomplete=\"{ autocomplete }\" autofocus=\"{ autofocus }\" disabled=\"{ disabled }\" maxlength=\"{ maxlength }\" readonly=\"true\" placeholder=\"{ placeholder }\">\n  </div>\n</yield>\n<yield from=\"label\">\n  <div class=\"label { active: true }\" if=\"{ label }\">{ label }</div>\n</yield>\n<yield from=\"error\">\n  <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n</yield>\n<yield from=\"instructions\">\n  <div class=\"helper\" if=\"{ instructions &amp;&amp; !errorMessage }\">{ instructions }</div>\n</yield>\n<yield from=\"copy-text\">\n  <div class=\"copy-text\">{ copied ? 'Copied' : '&#128203;' }</div>\n</yield>\n<yield></yield>";

// src/controls/copy.coffee
var Copy,
  extend$4 = function(child, parent) { for (var key in parent) { if (hasProp$4.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp$4 = {}.hasOwnProperty;

var copy = Copy = (function(superClass) {
  extend$4(Copy, superClass);

  function Copy() {
    return Copy.__super__.constructor.apply(this, arguments);
  }

  Copy.prototype.tag = 'copy';

  Copy.prototype.html = html$2;

  Copy.prototype.text = '';

  Copy.prototype.copied = false;

  Copy.prototype.init = function() {
    return Copy.__super__.init.apply(this, arguments);
  };

  Copy.prototype.copy = function(e) {
    var msg, range, s, successful, text, textArea;
    text = this.getText();
    textArea = document.createElement("textarea");
    textArea.contentEditable = true;
    textArea.readOnly = false;
    textArea.style.position = 'fixed';
    textArea.style.top = 0;
    textArea.style.left = 0;
    textArea.style.width = '2em';
    textArea.style.height = '2em';
    textArea.style.padding = 0;
    textArea.style.border = 'none';
    textArea.style.outline = 'none';
    textArea.style.boxShadow = 'none';
    textArea.style.background = 'transparent';
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.select();
    try {
      range = document.createRange();
      s = window.getSelection();
      s.removeAllRanges();
      s.addRange(range);
      textArea.setSelectionRange(0, 999999);
      successful = document.execCommand('copy');
      msg = successful != null ? successful : {
        'successful': 'unsuccessful'
      };
      console.log('Copying text command was ' + msg);
    } catch (error) {
      console.log('Oops, unable to copy');
    }
    document.body.removeChild(textArea);
    this.copied = true;
    this.scheduleUpdate();
    return false;
  };

  return Copy;

})(ReadOnly$1);

Copy.register();

// templates/controls/selection.pug
var html$3 = "\n<yield from=\"input\">\n  <div class=\"input-container {invalid: errorMessage, valid: valid, labeled: label}\">\n    <select id=\"{ getId() }\" name=\"{ getName() }\" onchange=\"{ change }\" onblur=\"{ change }\" autofocus=\"{ autofocus }\" disabled=\"{ disabled || !hasOptions() }\" multiple=\"{ multiple }\" size=\"{ size }\">\n      <option if=\"{ placeholder }\" value=\"\">{ placeholder }</option>\n      <option each=\"{ v, k in options() }\" value=\"{ k }\" selected=\"{ k == input.ref.get(input.name) }\">{ v }</option>\n    </select>\n    <div class=\"select-indicator\">▼</div>\n  </div>\n</yield>\n<yield from=\"label\">\n  <div class=\"label active\" if=\"{ label }\">{ label }</div>\n</yield>\n<yield from=\"error\">\n  <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n</yield>\n<yield from=\"instructions\">\n  <div class=\"helper\" if=\"{ instructions &amp;&amp; !errorMessage }\">{ instructions }</div>\n</yield>\n<yield></yield>";

// src/controls/selection.coffee
var Select,
  extend$5 = function(child, parent) { for (var key in parent) { if (hasProp$5.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp$5 = {}.hasOwnProperty;

var Select$1 = Select = (function(superClass) {
  extend$5(Select, superClass);

  function Select() {
    return Select.__super__.constructor.apply(this, arguments);
  }

  Select.prototype.tag = 'selection';

  Select.prototype.html = html$3;

  Select.prototype.placeholder = 'Select an Option';

  Select.prototype.autofocus = false;

  Select.prototype.disabled = false;

  Select.prototype.multiple = false;

  Select.prototype.size = null;

  Select.prototype._optionsHash = 'default';

  Select.prototype.selectOptions = {};

  Select.prototype.hasOptions = function() {
    this.options();
    return this._optionsHash.length > 2;
  };

  Select.prototype.options = function() {
    var optionsHash, selectOptions;
    selectOptions = this.selectOptions;
    if (typeof selectOptions === 'function') {
      selectOptions = selectOptions();
    }
    optionsHash = JSON.stringify(selectOptions);
    if (this._optionsHash !== optionsHash) {
      this._optionsHash = optionsHash;
    }
    return selectOptions;
  };

  Select.prototype.getValue = function(e) {
    var el, ref, ref1, ref2;
    el = e.target;
    return ((ref = (ref1 = el.options) != null ? (ref2 = ref1[el.selectedIndex]) != null ? ref2.value : void 0 : void 0) != null ? ref : '').trim();
  };

  Select.prototype.init = function() {
    return Select.__super__.init.apply(this, arguments);
  };

  return Select;

})(Control$1);

Select.register();

// src/controls/country-select.coffee
var CountrySelect,
  extend$6 = function(child, parent) { for (var key in parent) { if (hasProp$6.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp$6 = {}.hasOwnProperty;

var countrySelect = CountrySelect = (function(superClass) {
  extend$6(CountrySelect, superClass);

  function CountrySelect() {
    return CountrySelect.__super__.constructor.apply(this, arguments);
  }

  CountrySelect.prototype.tag = 'country-select';

  CountrySelect.prototype.options = function() {
    var countries, country, i, len, options, optionsHash, ref, ref1, ref2, ref3, ref4, ref5;
    countries = (ref = (ref1 = (ref2 = this.countries) != null ? ref2 : (ref3 = this.data) != null ? ref3.get('countries') : void 0) != null ? ref1 : (ref4 = this.parent) != null ? (ref5 = ref4.data) != null ? ref5.get('countries') : void 0 : void 0) != null ? ref : [];
    optionsHash = JSON.stringify(countries);
    if (this._optionsHash === optionsHash) {
      return this.selectOptions;
    }
    countries = countries.slice(0);
    this._optionsHash = optionsHash;
    this.selectOptions = options = {};
    countries.sort(function(a, b) {
      var nameA, nameB;
      nameA = a.name.toUpperCase();
      nameB = b.name.toUpperCase();
      if (nameA < nameB) {
        return -1;
      }
      if (nameA > nameB) {
        return 1;
      }
      return 0;
    });
    for (i = 0, len = countries.length; i < len; i++) {
      country = countries[i];
      options[country.code.toUpperCase()] = country.name;
    }
    return options;
  };

  CountrySelect.prototype.init = function() {
    return CountrySelect.__super__.init.apply(this, arguments);
  };

  return CountrySelect;

})(Select$1);

CountrySelect.register();

// templates/controls/currency.pug
var html$4 = "\n<yield from=\"input\">\n  <div class=\"currency-container input-container {invalid: errorMessage, valid: valid, labeled: label}\">\n    <input class=\"currency-amount right-aligned\" id=\"{ getId() }\" name=\"{ getName() }\" type=\"{ type }\" onchange=\"{ change }\" onblur=\"{ change }\" riot-value=\"{ renderValue() }\" autocomplete=\"{ autocomplete }\" autofocus=\"{ autofocus }\" disabled=\"{ disabled }\" maxlength=\"{ maxlength }\" readonly=\"{ readonly }\" placeholder=\"{ placeholder }\">\n    <div class=\"currency-code\">\n      <div class=\"currency-code-text\">{ getCurrency().toUpperCase() }</div>\n    </div>\n  </div>\n</yield>\n<yield from=\"label\">\n  <div class=\"label { active: input.ref.get(input.name) || input.ref.get(input.name) == 0 || placeholder }\" if=\"{ label }\">{ label }</div>\n</yield>\n<yield from=\"error\">\n  <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n</yield>\n<yield from=\"instructions\">\n  <div class=\"helper\" if=\"{ instructions &amp;&amp; !errorMessage }\">{ instructions }</div>\n</yield>\n<yield></yield>";

// src/controls/currency.coffee
var Currency,
  extend$7 = function(child, parent) { for (var key in parent) { if (hasProp$7.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp$7 = {}.hasOwnProperty;

var currency$1 = Currency = (function(superClass) {
  extend$7(Currency, superClass);

  function Currency() {
    return Currency.__super__.constructor.apply(this, arguments);
  }

  Currency.prototype.tag = 'currency';

  Currency.prototype.html = html$4;

  Currency.prototype.currency = '';

  Currency.prototype.init = function() {
    return Currency.__super__.init.apply(this, arguments);
  };

  Currency.prototype.getCurrency = function(e) {
    return valueOrCall$1(this.currency);
  };

  Currency.prototype.renderValue = function() {
    return currency.renderUICurrencyFromJSON(this.getCurrency(), this.input.ref.get(this.input.name));
  };

  Currency.prototype.getValue = function(e) {
    var el, ref;
    el = e.target;
    return currency.renderJSONCurrencyFromUI(this.getCurrency(), ((ref = el.value) != null ? ref : '0').trim());
  };

  return Currency;

})(Text$1);

Currency.register();

// src/$.coffee
var $;

$ = zepto;

if (window.$ == null) {
  ['width', 'height'].forEach(function(dimension) {
    var Dimension;
    Dimension = dimension.replace(/./, function(m) {
      return m[0].toUpperCase();
    });
    return $.fn['outer' + Dimension] = function(margin) {
      var elem, sides, size;
      elem = this;
      if (elem) {
        size = elem[dimension]();
        sides = {
          width: ['left', 'right'],
          height: ['top', 'bottom']
        };
        sides[dimension].forEach(function(side) {
          if (margin) {
            return size += parseInt(elem.css('margin-' + side), 10);
          }
        });
        return size;
      } else {
        return null;
      }
    };
  });
  window.$ = $;
} else {
  $ = window.$;
}

var $$1 = $;

// templates/controls/dropdown.pug
var html$5 = "\n<yield from=\"input\">\n  <div class=\"input-wrapper {invalid: errorMessage, valid: valid, labeled: label}\">\n    <select id=\"{ getId() }\" name=\"{ getName() }\" style=\"display: none\" onchange=\"{ change }\" onblur=\"{ change }\" placeholder=\"{ placeholder }\"></select>\n  </div>\n</yield>\n<yield from=\"label\">\n  <div class=\"label active\" if=\"{ label }\">{ label }</div>\n</yield>\n<yield from=\"error\">\n  <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n</yield>\n<yield from=\"instructions\">\n  <div class=\"helper\" if=\"{ instructions &amp;&amp; !errorMessage }\">{ instructions }</div>\n</yield>\n<yield></yield>";

// src/controls/dropdown.coffee
var Select$2, coolDown, isABrokenBrowser,
  extend$8 = function(child, parent) { for (var key in parent) { if (hasProp$8.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp$8 = {}.hasOwnProperty;

isABrokenBrowser = window.navigator.userAgent.indexOf('MSIE') > 0 || window.navigator.userAgent.indexOf('Trident') > 0;

coolDown = -1;

var dropdown = Select$2 = (function(superClass) {
  extend$8(Select, superClass);

  function Select() {
    return Select.__super__.constructor.apply(this, arguments);
  }

  Select.prototype.tag = 'dropdown';

  Select.prototype.html = html$5;

  Select.prototype.selectOptions = {};

  Select.prototype.options = function() {
    return this.selectOptions;
  };

  Select.prototype.readOnly = false;

  Select.prototype.ignore = false;

  Select.prototype.events = {
    updated: function() {
      return this.onUpdated();
    },
    mount: function() {
      return this.onUpdated();
    }
  };

  Select.prototype.getValue = function(event$$1) {
    var ref;
    return (ref = $$1(event$$1.target).val()) != null ? ref.trim().toLowerCase() : void 0;
  };

  Select.prototype.initSelect = function($select) {
    var $input, invertedOptions, name, options, ref, select, value;
    options = [];
    invertedOptions = {};
    ref = this.options();
    for (value in ref) {
      name = ref[value];
      options.push({
        text: name,
        value: value
      });
      invertedOptions[name] = value;
    }
    selectize($select, {
      dropdownParent: 'body'
    }).on('change', (function(_this) {
      return function(event$$1) {
        if (coolDown !== -1) {
          return;
        }
        coolDown = setTimeout(function() {
          return coolDown = -1;
        }, 100);
        _this.change(event$$1);
        event$$1.preventDefault();
        event$$1.stopPropagation();
        return false;
      };
    })(this));
    select = $select[0];
    select.selectize.addOption(options);
    select.selectize.addItem([this.input.ref.get(this.input.name)] || [], true);
    select.selectize.refreshOptions(false);
    $input = $select.parent().find('.selectize-input input:first');
    $input.on('change', function(event$$1) {
      var val;
      val = $$1(event$$1.target).val();
      if (invertedOptions[val] != null) {
        return $select[0].selectize.setValue(invertedOptions[val]);
      }
    });
    if (this.readOnly) {
      return $input.attr('readonly', true);
    }
  };

  Select.prototype.init = function(opts) {
    Select.__super__.init.apply(this, arguments);
    return this.style = this.style || 'width:100%';
  };

  Select.prototype.onUpdated = function() {
    var $control, $select, select, v;
    if (this.input == null) {
      return;
    }
    $select = $$1(this.root).find('select');
    select = $select[0];
    if (select != null) {
      v = this.input.ref.get(this.input.name);
      if (!this.initialized) {
        return esRaf.raf((function(_this) {
          return function() {
            _this.initSelect($select);
            return _this.initialized = true;
          };
        })(this));
      } else if ((select.selectize != null) && v !== select.selectize.getValue()) {
        select.selectize.clear(true);
        return select.selectize.addItem(v, true);
      }
    } else {
      $control = $$1(this.root).find('.selectize-control');
      if ($control[0] == null) {
        return esRaf.raf((function(_this) {
          return function() {
            return _this.scheduleUpdate();
          };
        })(this));
      }
    }
  };

  return Select;

})(Text$1);

Select$2.register();

// templates/controls/qrcode.pug
var html$6 = "\n<canvas></canvas>";

// src/controls/qrcode.coffee
var QRCode,
  extend$9 = function(child, parent) { for (var key in parent) { if (hasProp$9.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp$9 = {}.hasOwnProperty;

var qrcode = QRCode = (function(superClass) {
  extend$9(QRCode, superClass);

  function QRCode() {
    return QRCode.__super__.constructor.apply(this, arguments);
  }

  QRCode.prototype.tag = 'qrcode';

  QRCode.prototype.html = html$6;

  QRCode.prototype.text = '';

  QRCode.prototype.version = void 0;

  QRCode.prototype.errorCorrectionLevel = 'M';

  QRCode.prototype.scale = 4;

  QRCode.prototype.margin = 4;

  QRCode.prototype.events = {
    updated: function() {
      return this.onUpdated();
    },
    mount: function() {
      return this.onUpdated();
    }
  };

  QRCode.prototype.init = function() {
    return QRCode.__super__.init.apply(this, arguments);
  };

  QRCode.prototype.onUpdated = function() {
    var canvas;
    canvas = this.root.children[0];
    return qrcodeLite.toCanvas(canvas, this.getText(), {
      version: parseInt(this.version, 10),
      errorCorrectionLevel: this.errorCorrectionLevel,
      scale: parseInt(this.scale, 10),
      margin: parseInt(this.margin, 10)
    })["catch"](function(err) {
      return console.error(err);
    });
  };

  return QRCode;

})(ReadOnly$1);

QRCode.register();

// src/controls/recaptcha.coffee
var ReCaptcha,
  extend$a = function(child, parent) { for (var key in parent) { if (hasProp$a.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp$a = {}.hasOwnProperty;

var recaptcha = ReCaptcha = (function(superClass) {
  extend$a(ReCaptcha, superClass);

  function ReCaptcha() {
    return ReCaptcha.__super__.constructor.apply(this, arguments);
  }

  ReCaptcha.prototype.tag = 'recaptcha';

  ReCaptcha.prototype.html = '';

  ReCaptcha.prototype.theme = 'light';

  ReCaptcha.prototype.init = function() {
    var tryRecaptcha;
    if (!this.sitekey) {
      console.error('recaptcha: no sitekey found');
      return;
    }
    tryRecaptcha = (function(_this) {
      return function() {
        return requestAnimationFrame(function() {
          try {
            return grecaptcha.render(_this.root, {
              sitekey: _this.sitekey,
              theme: _this.theme,
              callback: function(res) {
                return _this.data.set('user.g-recaptcha-response', res);
              }
            });
          } catch (error) {
            return tryRecaptcha();
          }
        });
      };
    })(this);
    return tryRecaptcha();
  };

  return ReCaptcha;

})(El.View);

ReCaptcha.register();

// src/controls/state-select.coffee
var StateSelect,
  extend$b = function(child, parent) { for (var key in parent) { if (hasProp$b.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp$b = {}.hasOwnProperty;

var stateSelect = StateSelect = (function(superClass) {
  extend$b(StateSelect, superClass);

  function StateSelect() {
    return StateSelect.__super__.constructor.apply(this, arguments);
  }

  StateSelect.prototype.tag = 'state-select';

  StateSelect.prototype.options = function() {
    var code, countries, country, found, i, j, len, len1, options, optionsHash, ref, ref1, ref2, ref3, ref4, ref5, subdivision, subdivisions;
    countries = (ref = (ref1 = (ref2 = this.countries) != null ? ref2 : (ref3 = this.data) != null ? ref3.get('countries') : void 0) != null ? ref1 : (ref4 = this.parent) != null ? (ref5 = ref4.data) != null ? ref5.get('countries') : void 0 : void 0) != null ? ref : [];
    code = this.getCountry();
    if (!code || code.length !== 2) {
      this._optionsHash = '';
      return;
    }
    code = code.toUpperCase();
    found = false;
    for (i = 0, len = countries.length; i < len; i++) {
      country = countries[i];
      if (country.code.toUpperCase() === code) {
        found = true;
        subdivisions = country.subdivisions;
        optionsHash = JSON.stringify(subdivisions);
        if (this._optionsHash === optionsHash) {
          return this.selectOptions;
        }
        subdivisions = subdivisions.slice(0);
        this._optionsHash = optionsHash;
        this.selectOptions = options = {};
        subdivisions.sort(function(a, b) {
          var nameA, nameB;
          nameA = a.name.toUpperCase();
          nameB = b.name.toUpperCase();
          if (nameA < nameB) {
            return -1;
          }
          if (nameA > nameB) {
            return 1;
          }
          return 0;
        });
        for (j = 0, len1 = subdivisions.length; j < len1; j++) {
          subdivision = subdivisions[j];
          options[subdivision.code.toUpperCase()] = subdivision.name;
        }
        break;
      }
    }
    if (!found) {
      this._optionsHash = '';
    }
    return options;
  };

  StateSelect.prototype.getCountry = function() {
    return '';
  };

  StateSelect.prototype.init = function() {
    return StateSelect.__super__.init.apply(this, arguments);
  };

  return StateSelect;

})(Select$1);

StateSelect.register();

// templates/controls/textarea.pug
var html$7 = "\n<yield from=\"input\">\n  <div class=\"input-container {invalid: errorMessage, valid: valid, labeled: label}\">\n    <textarea id=\"{ getId() }\" name=\"{ getName() }\" onchange=\"{ change }\" onblur=\"{ change }\" rows=\"{ rows }\" cols=\"{ cols }\" disabled=\"{ disabled }\" maxlength=\"{ maxlength }\" placeholder=\"{ placeholder }\" readonly=\"{ readonly }\" wrap=\"{ wrap }\">{ getText() }</textarea>\n  </div>\n</yield>\n<yield from=\"label\">\n  <div class=\"label active\" if=\"{ label }\">{ label }</div>\n</yield>\n<yield from=\"error\">\n  <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n</yield>\n<yield from=\"instructions\">\n  <div class=\"helper\" if=\"{ instructions &amp;&amp; !errorMessage }\">{ instructions }</div>\n</yield>\n<yield></yield>";

// src/controls/textbox.coffee
var TextBox,
  extend$c = function(child, parent) { for (var key in parent) { if (hasProp$c.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp$c = {}.hasOwnProperty;

TextBox = (function(superClass) {
  extend$c(TextBox, superClass);

  function TextBox() {
    return TextBox.__super__.constructor.apply(this, arguments);
  }

  TextBox.prototype.tag = 'textbox';

  TextBox.prototype.html = html$7;

  TextBox.prototype.formElement = 'textarea';

  TextBox.prototype.rows = null;

  TextBox.prototype.cols = null;

  TextBox.prototype.disabled = false;

  TextBox.prototype.maxlength = null;

  TextBox.prototype.readonly = false;

  TextBox.prototype.wrap = null;

  return TextBox;

})(Text$1);

TextBox.register();

var TextBox$1 = TextBox;

// templates/controls/gmap.pug
var html$8 = "\n<yield from=\"map\">\n  <div class=\"map\"></div>\n</yield>\n<yield from=\"unused-message\">\n  <div class=\"unused-message\" if=\"{ !getAddress() }\">\n    <p>No Map</p>\n  </div>\n</yield>\n<yield from=\"error\">\n  <div class=\"error\" if=\"{ errorMessage }\">\n    <p>{ errorMessage }</p>\n  </div>\n</yield>\n<yield></yield>";

// src/controls/gmap.coffee
var GMap, geocode,
  extend$d = function(child, parent) { for (var key in parent) { if (hasProp$d.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp$d = {}.hasOwnProperty;

geocode = function(address) {
  return new Promise(function(resolve, reject) {
    return GMaps.geocode({
      address: address,
      callback: (function(_this) {
        return function(results, status) {
          if (status !== 'OK') {
            reject(status);
            return;
          }
          return resolve(results);
        };
      })(this)
    });
  });
};

var gmap = GMap = (function(superClass) {
  extend$d(GMap, superClass);

  function GMap() {
    return GMap.__super__.constructor.apply(this, arguments);
  }

  GMap.prototype.tag = 'gmap';

  GMap.prototype.html = html$8;

  GMap.prototype.address = '';

  GMap.prototype.previousAddress = '';

  GMap.prototype.errorMessage = '';

  GMap.prototype.mapTypeId = 'roadmap';

  GMap.prototype.init = function() {
    var resize;
    if (!this.address) {
      GMap.__super__.init.apply(this, arguments);
    }
    resize = (function(_this) {
      return function() {
        return _this.resize();
      };
    })(this);
    this.on('mount', (function(_this) {
      return function() {
        var settings;
        settings = {
          div: _this.root.getElementsByClassName('map')[0],
          lat: 21.3280681,
          lng: -157.798970564,
          zoom: 10,
          disableDefaultUI: true,
          draggable: false,
          zoomControl: false,
          scrollwheel: false,
          disableDoubleClickZoom: true,
          mapTypeId: _this.mapTypeId
        };
        _this.map = new GMaps(settings);
        window.addEventListener('resize', resize);
        return _this.scheduleUpdate();
      };
    })(this));
    this.on('updated', (function(_this) {
      return function() {
        var add;
        add = _this.getAddress();
        if (add !== _this.previousAddress) {
          _this.previousAddress = add;
          return geocode(add).then(function(results) {
            var latlng;
            _this.latlng = latlng = results[0].geometry.location;
            _this.map.removeMarkers();
            _this.map.addMarker({
              lat: latlng.lat(),
              lng: latlng.lng()
            });
            return resize();
          })["catch"](function(err) {
            return _this.errorMessage = 'Error: ' + err;
          });
        }
      };
    })(this));
    return this.on('unmount', (function(_this) {
      return function() {
        return window.removeEventListener('resize', resize);
      };
    })(this));
  };

  GMap.prototype.getAddress = function() {
    return (valueOrCall$1(this.address) || this.input.ref.get(input.name)).trim();
  };

  GMap.prototype.resize = function() {
    if (!this.map) {
      return;
    }
    this.map.refresh();
    if (this.latlng) {
      return this.map.setCenter(this.latlng.lat(), this.latlng.lng());
    }
  };

  GMap.prototype.change = function() {};

  GMap.prototype._change = function() {};

  GMap.prototype.getName = function() {};

  return GMap;

})(Control$1);

GMap.register();

// src/controls/index.coffee

// src/index.coffee

exports.Events = Events$1;
exports.CheckBox = checkbox;
exports.Control = Control$1;
exports.Copy = copy;
exports.CountrySelect = countrySelect;
exports.Currency = currency$1;
exports.Dropdown = dropdown;
exports.GMap = gmap;
exports.QRCode = qrcode;
exports.ReCaptcha = recaptcha;
exports.ReadOnly = ReadOnly$1;
exports.Select = Select$1;
exports.StateSelect = stateSelect;
exports.Text = Text$1;
exports.TextBox = TextBox$1;
//# sourceMappingURL=el-controls.js.map
