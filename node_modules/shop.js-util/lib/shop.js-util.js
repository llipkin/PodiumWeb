'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var moment = _interopDefault(require('moment-timezone'));
var store = _interopDefault(require('akasha'));

// src/analytics.coffee

// src/card.coffee
var cards;
var defaultFormat;

defaultFormat = /(\d{1,4})/g;

cards = [
  {
    type: 'amex',
    pattern: /^3[47]/,
    format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
    length: [15],
    cvcLength: [4],
    luhn: true
  }, {
    type: 'dankort',
    pattern: /^5019/,
    format: defaultFormat,
    length: [16],
    cvcLength: [3],
    luhn: true
  }, {
    type: 'dinersclub',
    pattern: /^(36|38|30[0-5])/,
    format: /(\d{1,4})(\d{1,6})?(\d{1,4})?/,
    length: [14],
    cvcLength: [3],
    luhn: true
  }, {
    type: 'discover',
    pattern: /^(6011|65|64[4-9]|622)/,
    format: defaultFormat,
    length: [16],
    cvcLength: [3],
    luhn: true
  }, {
    type: 'jcb',
    pattern: /^35/,
    format: defaultFormat,
    length: [16],
    cvcLength: [3],
    luhn: true
  }, {
    type: 'laser',
    pattern: /^(6706|6771|6709)/,
    format: defaultFormat,
    length: [16, 17, 18, 19],
    cvcLength: [3],
    luhn: true
  }, {
    type: 'maestro',
    pattern: /^(5018|5020|5038|6304|6703|6708|6759|676[1-3])/,
    format: defaultFormat,
    length: [12, 13, 14, 15, 16, 17, 18, 19],
    cvcLength: [3],
    luhn: true
  }, {
    type: 'mastercard',
    pattern: /^(5[1-5]|677189)|^(222[1-9]|2[3-6]\d{2}|27[0-1]\d|2720)/,
    format: defaultFormat,
    length: [16],
    cvcLength: [3],
    luhn: true
  }, {
    type: 'unionpay',
    pattern: /^62/,
    format: defaultFormat,
    length: [16, 17, 18, 19],
    cvcLength: [3],
    luhn: false
  }, {
    type: 'visaelectron',
    pattern: /^4(026|17500|405|508|844|91[37])/,
    format: defaultFormat,
    length: [16],
    cvcLength: [3],
    luhn: true
  }, {
    type: 'elo',
    pattern: /^(4011|438935|45(1416|76|7393)|50(4175|6699|67|90[4-7])|63(6297|6368))/,
    format: defaultFormat,
    length: [16],
    cvcLength: [3],
    luhn: true
  }, {
    type: 'visa',
    pattern: /^4/,
    format: defaultFormat,
    length: [13, 16, 19],
    cvcLength: [3],
    luhn: true
  }
];

var luhnCheck = function(num) {
  var digit, digits, i, len, odd, sum;
  odd = true;
  sum = 0;
  digits = (num + '').split('').reverse();
  for (i = 0, len = digits.length; i < len; i++) {
    digit = digits[i];
    digit = parseInt(digit, 10);
    if ((odd = !odd)) {
      digit *= 2;
    }
    if (digit > 9) {
      digit -= 9;
    }
    sum += digit;
  }
  return sum % 10 === 0;
};

var cardFromNumber = function(num) {
  var card, i, len;
  num = (num + '').replace(/\D/g, '');
  for (i = 0, len = cards.length; i < len; i++) {
    card = cards[i];
    if (card.pattern.test(num)) {
      return card;
    }
  }
};

var cardType = function(num) {
  var ref;
  if (!num) {
    return null;
  }
  return ((ref = cardFromNumber(num)) != null ? ref.type : void 0) || null;
};

var restrictNumeric = function(e) {
  var input, key;
  if (e.metaKey || e.ctrlKey) {
    return true;
  }
  key = e.keyCode;
  if (key === 32) {
    return e.preventDefault();
  }
  if (key === 0) {
    return true;
  }
  if (key < 33) {
    return true;
  }
  input = String.fromCharCode(key);
  if (!/[\d\s]/.test(input)) {
    return e.preventDefault();
  }
  return true;
};

// src/country.coffee
var requiresPostalCode = function(code) {
  code = code.toLowerCase();
  return code === 'dz' || code === 'ar' || code === 'am' || code === 'au' || code === 'at' || code === 'az' || code === 'a2' || code === 'bd' || code === 'by' || code === 'be' || code === 'ba' || code === 'br' || code === 'bn' || code === 'bg' || code === 'ca' || code === 'ic' || code === 'cn' || code === 'hr' || code === 'cy' || code === 'cz' || code === 'dk' || code === 'en' || code === 'ee' || code === 'fo' || code === 'fi' || code === 'fr' || code === 'ge' || code === 'de' || code === 'gr' || code === 'gl' || code === 'gu' || code === 'gg' || code === 'ho' || code === 'hu' || code === 'in' || code === 'id' || code === 'il' || code === 'it' || code === 'jp' || code === 'je' || code === 'kz' || code === 'kr' || code === 'ko' || code === 'kg' || code === 'lv' || code === 'li' || code === 'lt' || code === 'lu' || code === 'mk' || code === 'mg' || code === 'm3' || code === 'my' || code === 'mh' || code === 'mq' || code === 'yt' || code === 'mx' || code === 'mn' || code === 'me' || code === 'nl' || code === 'nz' || code === 'nb' || code === 'no' || code === 'pk' || code === 'ph' || code === 'pl' || code === 'po' || code === 'pt' || code === 'pr' || code === 're' || code === 'ru' || code === 'sa' || code === 'sf' || code === 'cs' || code === 'sg' || code === 'sk' || code === 'si' || code === 'za' || code === 'es' || code === 'lk' || code === 'nt' || code === 'sx' || code === 'uv' || code === 'vl' || code === 'se' || code === 'ch' || code === 'tw' || code === 'tj' || code === 'th' || code === 'tu' || code === 'tn' || code === 'tr' || code === 'tm' || code === 'vi' || code === 'ua' || code === 'gb' || code === 'us' || code === 'uy' || code === 'uz' || code === 'va' || code === 'vn' || code === 'wl' || code === 'ya';
};

var requiresState = function(code, countries) {
  var country, i, len;
  code = code.toUpperCase();
  for (i = 0, len = countries.length; i < len; i++) {
    country = countries[i];
    if (country.code.toUpperCase() === code) {
      return country.subdivisions.length > 0;
    }
  }
  return false;
};

// src/data/currencies.coffee
var currencies = {
  data: {
    'aud': '$',
    'cad': '$',
    'eur': '€',
    'gbp': '£',
    'hkd': '$',
    'jpy': '¥',
    'nzd': '$',
    'sgd': '$',
    'usd': '$',
    'ghc': '¢',
    'ars': '$',
    'bsd': '$',
    'bbd': '$',
    'bmd': '$',
    'bnd': '$',
    'kyd': '$',
    'clp': '$',
    'cop': '$',
    'xcd': '$',
    'svc': '$',
    'fjd': '$',
    'gyd': '$',
    'lrd': '$',
    'mxn': '$',
    'nad': '$',
    'sbd': '$',
    'srd': '$',
    'tvd': '$',
    'bob': '$b',
    'uyu': '$u',
    'egp': '£',
    'fkp': '£',
    'gip': '£',
    'ggp': '£',
    'imp': '£',
    'jep': '£',
    'lbp': '£',
    'shp': '£',
    'syp': '£',
    'cny': '¥',
    'afn': '؋',
    'thb': '฿',
    'khr': '៛',
    'crc': '₡',
    'trl': '₤',
    'ngn': '₦',
    'kpw': '₩',
    'krw': '₩',
    'ils': '₪',
    'vnd': '₫',
    'lak': '₭',
    'mnt': '₮',
    'cup': '₱',
    'php': '₱',
    'uah': '₴',
    'mur': '₨',
    'npr': '₨',
    'pkr': '₨',
    'scr': '₨',
    'lkr': '₨',
    'irr': '﷼',
    'omr': '﷼',
    'qar': '﷼',
    'sar': '﷼',
    'yer': '﷼',
    'pab': 'b/.',
    'vef': 'bs',
    'bzd': 'bz$',
    'nio': 'c$',
    'chf': 'chf',
    'huf': 'ft',
    'awg': 'ƒ',
    'ang': 'ƒ',
    'pyg': 'gs',
    'jmd': 'j$',
    'czk': 'kč',
    'bam': 'km',
    'hrk': 'kn',
    'dkk': 'kr',
    'eek': 'kr',
    'isk': 'kr',
    'nok': 'kr',
    'sek': 'kr',
    'hnl': 'l',
    'ron': 'lei',
    'all': 'lek',
    'lvl': 'ls',
    'ltl': 'lt',
    'mzn': 'mt',
    'twd': 'nt$',
    'bwp': 'p',
    'byr': 'p.',
    'gtq': 'q',
    'zar': 'r',
    'brl': 'r$',
    'dop': 'rd$',
    'myr': 'rm',
    'idr': 'rp',
    'sos': 's',
    'pen': 's/.',
    'ttd': 'tt$',
    'zwd': 'z$',
    'pln': 'zł',
    'mkd': 'ден',
    'rsd': 'Дин.',
    'bgn': 'лв',
    'kzt': 'лв',
    'kgs': 'лв',
    'uzs': 'лв',
    'azn': 'ман',
    'rub': 'руб',
    'inr': '',
    'try': '',
    '': '',
    'pnt': '',
    'btc': '',
    'eth': ''
  }
};

// src/currency.coffee
var currencySeparator;
var currencySigns;
var digitsOnlyRe;

currencySeparator = '.';

digitsOnlyRe = new RegExp('[^\\d.-]', 'g');

currencySigns = currencies.data;

var isZeroDecimal = function(code) {
  if (code) {
    code = code.toLowerCase();
  }
  if (code === 'bif' || code === 'clp' || code === 'djf' || code === 'gnf' || code === 'jpy' || code === 'kmf' || code === 'krw' || code === 'mga' || code === 'pyg' || code === 'rwf' || code === 'vnd' || code === 'vuv' || code === 'xaf' || code === 'xof' || code === 'xpf') {
    return true;
  }
  return false;
};

var isCrypto = function(code) {
  return code === 'eth' || code === 'btc' || code === 'xbt';
};

var renderUpdatedUICurrency = function(code, uiCurrency) {
  if (code) {
    code = code.toLowerCase();
  }
  return renderUICurrencyFromJSON(code, renderJSONCurrencyFromUI(code, uiCurrency));
};

var renderUICurrencyFromJSON = function(code, jsonCurrency) {
  var currentCurrencySign, ref;
  if (code) {
    code = code.toLowerCase();
  }
  if (isNaN(jsonCurrency)) {
    jsonCurrency = 0;
  }
  currentCurrencySign = (ref = currencySigns[code]) != null ? ref : '';
  if (code === 'eth' || code === 'btc' || code === 'xbt') {
    jsonCurrency = jsonCurrency / 1e9;
    return currentCurrencySign + jsonCurrency;
  }
  jsonCurrency = '' + jsonCurrency;
  if (isZeroDecimal(code)) {
    return currentCurrencySign + jsonCurrency;
  }
  while (jsonCurrency.length < 3) {
    jsonCurrency = '0' + jsonCurrency;
  }
  return currentCurrencySign + jsonCurrency.substr(0, jsonCurrency.length - 2) + '.' + jsonCurrency.substr(-2);
};

var renderJSONCurrencyFromUI = function(code, uiCurrency) {
  var currentCurrencySign, parts;
  if (code) {
    code = code.toLowerCase();
  }
  if (code === 'eth' || code === 'btc' || code === 'xbt') {
    return parseFloat(('' + uiCurrency).replace(digitsOnlyRe, '')) * 1e9;
  }
  if (isZeroDecimal(code)) {
    return parseInt(('' + uiCurrency).replace(digitsOnlyRe, '').replace(currencySeparator, ''), 10);
  }
  parts = uiCurrency.split(currencySeparator);
  if (parts.length > 1) {
    parts[1] = parts[1].substr(0, 2);
    while (parts[1].length < 2) {
      parts[1] += '0';
    }
  } else {
    parts[1] = '00';
  }
  return parseInt(parseFloat(parts[0].replace(digitsOnlyRe, '')) * 100 + parseFloat(parts[1].replace(digitsOnlyRe, '')), 10);
};

// src/language.coffee
var getLanguage = function() {
  var ref, ref1, ref2, ref3, ref4;
  return (ref = (ref1 = (ref2 = window.navigator) != null ? ref2.userLanguage : void 0) != null ? ref1 : (ref3 = window.navigator) != null ? ref3.languages[0] : void 0) != null ? ref : (ref4 = window.navigator) != null ? ref4.language : void 0;
};

// src/dates.coffee
var rfc3339 = 'YYYY-MM-DDTHH:mm:ssZ';

var mmddyyyy = 'M-DD-YYYY';

var yyyymmdd = 'YYYY-MM-DD';

var ddmmyyyy = 'D-MM-YYYY';

var renderDate = function(date, format) {
  if (format == null) {
    if (getLanguage() === 'en-US') {
      format = mmddyyyy;
    } else {
      format = ddmmyyyy;
    }
  }
  return moment(date).format(format);
};

var renderUIDate = function(date) {
  return renderDate(date);
};

var renderJSONDate = function(date) {
  return renderDate(date, rfc3339);
};

// src/uri.coffee
var queries;

queries = null;

var getQueries = function() {
  var err, k, match, q, qs, search, v;
  if (queries) {
    return queries;
  }
  search = /([^&=]+)=?([^&]*)/g;
  q = window.location.href.split('?')[1];
  qs = {};
  if (q != null) {
    while ((match = search.exec(q))) {
      k = match[1];
      try {
        k = decodeURIComponent(k);
      } catch (error) {}
      v = match[2];
      try {
        v = decodeURIComponent(v);
      } catch (error) {
        
      }
      qs[k] = v;
    }
  }
  return queries = qs;
};

var getReferrer = function(hashReferrer) {
  var r, ref, referrer;
  if (hashReferrer == null) {
    hashReferrer = false;
  }
  ref = null;
  if (getQueries().referrer != null) {
    ref = getQueries().referrer;
  } else {
    ref = store.get('referrer');
  }
  if (hashReferrer) {
    r = window.location.hash.replace('#', '');
    if (r !== '') {
      return referrer = r;
    } else {
      return referrer = ref;
    }
  } else {
    return referrer = ref;
  }
};

var getMCIds = function() {
  return [getQueries().mc_eid, getQueries().mc_cid];
};

// src/qrcodes.coffee
var renderCryptoQR = function(currency, address, amount) {
  switch (currency) {
    case 'eth':
      return 'ethereum:' + address + '?value=' + amount / 1e9;
    case 'btc':
      return 'bitcoin:' + address + '?amount=' + amount / 1e9;
  }
  return 'unknown';
};

// src/index.coffee

exports.luhnCheck = luhnCheck;
exports.cardFromNumber = cardFromNumber;
exports.cardType = cardType;
exports.restrictNumeric = restrictNumeric;
exports.requiresPostalCode = requiresPostalCode;
exports.requiresState = requiresState;
exports.isZeroDecimal = isZeroDecimal;
exports.isCrypto = isCrypto;
exports.renderUpdatedUICurrency = renderUpdatedUICurrency;
exports.renderUICurrencyFromJSON = renderUICurrencyFromJSON;
exports.renderJSONCurrencyFromUI = renderJSONCurrencyFromUI;
exports.rfc3339 = rfc3339;
exports.mmddyyyy = mmddyyyy;
exports.yyyymmdd = yyyymmdd;
exports.ddmmyyyy = ddmmyyyy;
exports.renderDate = renderDate;
exports.renderUIDate = renderUIDate;
exports.renderJSONDate = renderJSONDate;
exports.getLanguage = getLanguage;
exports.getQueries = getQueries;
exports.getReferrer = getReferrer;
exports.getMCIds = getMCIds;
exports.renderCryptoQR = renderCryptoQR;
//# sourceMappingURL=shop.js-util.js.map
