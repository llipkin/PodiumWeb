// Generated by CoffeeScript 1.11.1
var Cart, Promise, analytics;

analytics = require('./analytics');

Promise = require('broken');

Cart = (function() {
  Cart.prototype.waits = 0;

  Cart.prototype.queue = null;

  Cart.prototype.data = null;

  Cart.prototype.client = null;

  Cart.prototype.cartPromise = null;

  Cart.prototype.promise = null;

  Cart.prototype.reject = null;

  Cart.prototype.resolve = null;

  Cart.prototype.opts = {};

  function Cart(client, data1, opts) {
    this.client = client;
    this.data = data1;
    this.opts = opts != null ? opts : {};
    this.queue = [];
    this.invoice();
  }

  Cart.prototype.initCart = function() {
    var cartId, i, item, items, j, len;
    cartId = this.data.get('order.cartId');
    if (!cartId && (this.client.cart != null)) {
      return this.client.cart.create().then((function(_this) {
        return function(cart) {
          var i, item, items, j, len;
          _this.data.set('order.cartId', cart.id);
          items = _this.data.get('order.items');
          for (i = j = 0, len = items.length; j < len; i = ++j) {
            item = items[i];
            _this._cartSet(item.productId, item.quantity);
          }
          return _this.onCart(cart.id);
        };
      })(this));
    } else {
      this.onCart(cartId);
      items = this.data.get('order.items');
      for (i = j = 0, len = items.length; j < len; i = ++j) {
        item = items[i];
        this._cartSet(item.productId, item.quantity);
      }
      return this.onCart(cartId);
    }
  };

  Cart.prototype.onCart = function(cartId) {};

  Cart.prototype._cartSet = function(id, quantity) {
    var cartId;
    cartId = this.data.get('order.cartId');
    if (cartId && (this.client.cart != null)) {
      return this.client.cart.set({
        id: cartId,
        productId: id,
        quantity: quantity
      });
    }
  };

  Cart.prototype._cartUpdate = function(cart) {
    var cartId;
    cartId = this.data.get('order.cartId');
    if (cartId && (this.client.cart != null)) {
      cart.id = cartId;
      return this.client.cart.update(cart);
    }
  };

  Cart.prototype.set = function(id, quantity, locked) {
    if (locked == null) {
      locked = false;
    }
    this.queue.push([id, quantity, locked]);
    if (this.queue.length === 1) {
      this.promise = new Promise((function(_this) {
        return function(resolve, reject) {
          _this.resolve = resolve;
          return _this.reject = reject;
        };
      })(this));
      this._set();
    }
    return this.promise;
  };

  Cart.prototype.get = function(id) {
    var i, item, items, j, k, len, len1, ref;
    items = this.data.get('order.items');
    for (i = j = 0, len = items.length; j < len; i = ++j) {
      item = items[i];
      if (item.id !== id && item.productId !== id && item.productSlug !== id) {
        continue;
      }
      return item;
    }
    ref = this.queue;
    for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
      item = ref[i];
      if (item[0] !== id) {
        continue;
      }
      return {
        id: item[0],
        quantity: item[2],
        locked: item[3]
      };
    }
  };

  Cart.prototype._set = function() {
    var a, deltaQuantity, i, id, item, items, j, k, len, len1, locked, newValue, oldValue, quantity, ref;
    items = this.data.get('order.items');
    if (this.queue.length === 0) {
      this.invoice();
      if (this.resolve != null) {
        this.resolve(items);
      }
      return;
    }
    ref = this.queue[0], id = ref[0], quantity = ref[1], locked = ref[2];
    if (quantity === 0) {
      for (i = j = 0, len = items.length; j < len; i = ++j) {
        item = items[i];
        if (item.productId === id || item.productSlug === id || item.id === id) {
          break;
        }
      }
      if (i < items.length) {
        this.data.set('order.items', []);
        items.splice(i, 1);
        this.onUpdate();
        a = {
          id: item.productId,
          sku: item.productSlug,
          name: item.productName,
          quantity: item.quantity,
          price: parseFloat(item.price / 100)
        };
        if (this.opts.analyticsProductTransform != null) {
          a = this.opts.analyticsProductTransform(a);
        }
        analytics.track('Removed Product', a);
        this.data.set('order.items', items);
        this._cartSet(item.productId, 0);
        this.onUpdate(item);
      }
      this.queue.shift();
      this._set();
      return;
    }
    for (i = k = 0, len1 = items.length; k < len1; i = ++k) {
      item = items[i];
      if (item.id !== id && item.productId !== id && item.productSlug !== id) {
        continue;
      }
      oldValue = item.quantity;
      item.quantity = quantity;
      item.locked = locked;
      newValue = quantity;
      deltaQuantity = newValue - oldValue;
      if (deltaQuantity > 0) {
        a = {
          id: item.productId,
          sku: item.productSlug,
          name: item.productName,
          quantity: deltaQuantity,
          price: parseFloat(item.price / 100)
        };
        if (this.opts.analyticsProductTransform != null) {
          a = this.opts.analyticsProductTransform(a);
        }
        analytics.track('Added Product', a);
      } else if (deltaQuantity < 0) {
        a = {
          id: item.productId,
          sku: item.productSlug,
          name: item.productName,
          quantity: deltaQuantity,
          price: parseFloat(item.price / 100)
        };
        if (this.opts.analyticsProductTransform != null) {
          a = this.opts.analyticsProductTransform(a);
        }
        analytics.track('Removed Product', a);
      }
      this.data.set('order.items.' + i + '.quantity', quantity);
      this.data.set('order.items.' + i + '.locked', locked);
      this._cartSet(item.productId, quantity);
      this.onUpdate(item);
      this.queue.shift();
      this._set();
      return;
    }
    items.push({
      id: id,
      quantity: quantity,
      locked: locked
    });
    this.waits++;
    return this.load(id);
  };

  Cart.prototype.load = function(id) {
    return this.client.product.get(id).then((function(_this) {
      return function(product) {
        var a, i, item, items, j, len;
        _this.waits--;
        items = _this.data.get('order.items');
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          if (product.id === item.id || product.slug === item.id) {
            a = {
              id: product.id,
              sku: product.slug,
              name: product.name,
              quantity: item.quantity,
              price: parseFloat(product.price / 100)
            };
            if (_this.opts.analyticsProductTransform != null) {
              a = _this.opts.analyticsProductTransform(a);
            }
            analytics.track('Added Product', a);
            _this.update(product, item);
            _this.data.set('order.items.' + i, item);
            _this._cartSet(product.id, item.quantity);
            break;
          }
        }
        _this.queue.shift();
        return _this._set();
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        var i, item, items, j, len;
        _this.waits--;
        console.log("setItem Error: " + err.stack);
        items = _this.data.get('order.items');
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          if (item.id === id) {
            items.splice(i, 1);
            _this.data.set('order.items', items);
            break;
          }
        }
        _this.queue.shift();
        return _this._set();
      };
    })(this));
  };

  Cart.prototype.refresh = function(id) {
    var items;
    items = this.data.get('order.items');
    return this.client.product.get(id).then((function(_this) {
      return function(product) {
        var i, item, j, len;
        _this.waits--;
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          if (product.id === item.productId || product.slug === item.productSlug) {
            _this.update(product, item);
            break;
          }
        }
        return items;
      };
    })(this))["catch"](function(err) {
      return console.log("setItem Error: " + err);
    });
  };

  Cart.prototype.update = function(product, item) {
    delete item.id;
    item.productId = product.id;
    item.productSlug = product.slug;
    item.productName = product.name;
    item.price = product.price;
    item.listPrice = product.listPrice;
    item.description = product.description;
    return this.onUpdate(item);
  };

  Cart.prototype.onUpdate = function(item) {};

  Cart.prototype.promoCode = function(promoCode) {
    if (promoCode != null) {
      this.invoice();
      return this.client.coupon.get(promoCode).then((function(_this) {
        return function(coupon) {
          if (coupon.enabled) {
            _this.data.set('order.coupon', coupon);
            _this.data.set('order.couponCodes', [promoCode]);
            _this._cartUpdate({
              coupon: coupon,
              couponCodes: [promoCode]
            });
            if (coupon.freeProductId !== "" && coupon.freeQuantity > 0) {
              return _this.client.product.get(coupon.freeProductId).then(function(freeProduct) {
                return _this.invoice();
              })["catch"](function(err) {
                throw new Error('This coupon is invalid.');
              });
            } else {
              _this.invoice();
            }
          } else {
            throw new Error('This code is expired.');
          }
        };
      })(this));
    }
    return this.data.get('order.promoCode');
  };

  Cart.prototype.taxRates = function(taxRates) {
    if (taxRates != null) {
      this.data.set('taxRates', taxRates);
      this.invoice();
    }
    return this.data.get('taxRates');
  };

  Cart.prototype.shippingRates = function(shippingRates) {
    if (shippingRates != null) {
      this.data.set('shippingRates', shippingRates);
      this.invoice();
    }
    return this.data.get('shippingRates');
  };

  Cart.prototype.invoice = function() {
    var city, country, coupon, discount, item, items, j, k, l, len, len1, len2, len3, len4, len5, m, n, o, quantity, ref, ref1, ref2, ref3, ref4, shipping, shippingRate, shippingRateFilter, shippingRates, state, subtotal, tax, taxRate, taxRateFilter, taxRates;
    items = this.data.get('order.items');
    discount = 0;
    coupon = this.data.get('order.coupon');
    if (coupon != null) {
      switch (coupon.type) {
        case 'flat':
          if ((coupon.productId == null) || coupon.productId === '') {
            discount = coupon.amount || 0;
          } else {
            ref = this.data.get('order.items');
            for (j = 0, len = ref.length; j < len; j++) {
              item = ref[j];
              if (item.productId === coupon.productId) {
                quantity = item.quantity;
                if (coupon.once) {
                  quantity = 1;
                }
                discount += (coupon.amount || 0) * quantity;
              }
            }
          }
          break;
        case 'percent':
          if ((coupon.productId == null) || coupon.productId === '') {
            ref1 = this.data.get('order.items');
            for (k = 0, len1 = ref1.length; k < len1; k++) {
              item = ref1[k];
              quantity = item.quantity;
              if (coupon.once) {
                quantity = 1;
              }
              discount += (coupon.amount || 0) * item.price * quantity * 0.01;
            }
          } else {
            ref2 = this.data.get('order.items');
            for (l = 0, len2 = ref2.length; l < len2; l++) {
              item = ref2[l];
              if (item.productId === coupon.productId) {
                quantity = item.quantity;
                if (coupon.once) {
                  quantity = 1;
                }
                discount += (coupon.amount || 0) * item.price * quantity * 0.01;
              }
            }
          }
          discount = Math.floor(discount);
      }
    }
    this.data.set('order.discount', discount);
    items = this.data.get('order.items');
    subtotal = -discount;
    for (m = 0, len3 = items.length; m < len3; m++) {
      item = items[m];
      subtotal += item.price * item.quantity;
    }
    this.data.set('order.subtotal', subtotal);
    taxRates = this.data.get('taxRates');
    if (taxRates != null) {
      for (n = 0, len4 = taxRates.length; n < len4; n++) {
        taxRateFilter = taxRates[n];
        city = this.data.get('order.shippingAddress.city');
        if (!city || ((taxRateFilter.city != null) && taxRateFilter.city.toLowerCase() !== city.toLowerCase())) {
          continue;
        }
        state = this.data.get('order.shippingAddress.state');
        if (!state || ((taxRateFilter.state != null) && taxRateFilter.state.toLowerCase() !== state.toLowerCase())) {
          continue;
        }
        country = this.data.get('order.shippingAddress.country');
        if (!country || ((taxRateFilter.country != null) && taxRateFilter.country.toLowerCase() !== country.toLowerCase())) {
          continue;
        }
        this.data.set('order.taxRate', taxRateFilter.taxRate);
        break;
      }
    }
    shippingRates = this.data.get('shippingRates');
    if (shippingRates != null) {
      for (o = 0, len5 = shippingRates.length; o < len5; o++) {
        shippingRateFilter = shippingRates[o];
        city = this.data.get('order.shippingAddress.city');
        if (!city || ((shippingRateFilter.city != null) && shippingRateFilter.city.toLowerCase() !== city.toLowerCase())) {
          continue;
        }
        state = this.data.get('order.shippingAddress.state');
        if (!state || ((shippingRateFilter.state != null) && shippingRateFilter.state.toLowerCase() !== state.toLowerCase())) {
          continue;
        }
        country = this.data.get('order.shippingAddress.country');
        if (!country || ((shippingRateFilter.country != null) && shippingRateFilter.country.toLowerCase() !== country.toLowerCase())) {
          continue;
        }
        this.data.set('order.shippingRate', shippingRateFilter.shippingRate);
        break;
      }
    }
    taxRate = (ref3 = this.data.get('order.taxRate')) != null ? ref3 : 0;
    tax = Math.ceil((taxRate != null ? taxRate : 0) * subtotal);
    shippingRate = (ref4 = this.data.get('order.shippingRate')) != null ? ref4 : 0;
    shipping = shippingRate;
    this.data.set('order.shipping', shipping);
    this.data.set('order.tax', tax);
    return this.data.set('order.total', subtotal + shipping + tax);
  };

  Cart.prototype.checkout = function() {
    var data;
    this.invoice();
    data = {
      user: this.data.get('user'),
      order: this.data.get('order'),
      payment: this.data.get('payment')
    };
    return this.client.checkout.authorize(data).then((function(_this) {
      return function(order) {
        var a, i, item, j, len, options, p, p2, ref, referralProgram;
        _this.data.set('coupon', _this.data.get('order.coupon') || {});
        _this.data.set('order', order);
        p = _this.client.checkout.capture(order.id).then(function(order) {
          _this.data.set('order', order);
          return order;
        })["catch"](function(err) {
          var ref;
          if (typeof window !== "undefined" && window !== null) {
            if ((ref = window.Raven) != null) {
              ref.captureException(err);
            }
          }
          return console.log("capture Error: " + err);
        });
        referralProgram = _this.data.get('referralProgram');
        if (referralProgram != null) {
          p2 = _this.client.referrer.create({
            userId: data.order.userId,
            orderId: data.order.orderId,
            program: referralProgram,
            programId: _this.data.get('referralProgram.id')
          })["catch"](function(err) {
            var ref;
            if (typeof window !== "undefined" && window !== null) {
              if ((ref = window.Raven) != null) {
                ref.captureException(err);
              }
            }
            return console.log("new referralProgram Error: " + err);
          });
          p = Promise.settle([p, p2]).then(function(pis) {
            var referrer;
            order = pis[0].value;
            referrer = pis[1].value;
            _this.data.set('referrerId', referrer.id);
            return order;
          })["catch"](function(err) {
            var ref;
            if (typeof window !== "undefined" && window !== null) {
              if ((ref = window.Raven) != null) {
                ref.captureException(err);
              }
            }
            return console.log("order/referralProgram Error: " + err);
          });
        }
        options = {
          orderId: _this.data.get('order.id'),
          total: parseFloat(_this.data.get('order.total') / 100),
          shipping: parseFloat(_this.data.get('order.shipping') / 100),
          tax: parseFloat(_this.data.get('order.tax') / 100),
          discount: parseFloat(_this.data.get('order.discount') / 100),
          coupon: _this.data.get('order.couponCodes.0') || '',
          currency: _this.data.get('order.currency'),
          products: []
        };
        ref = _this.data.get('order.items');
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          item = ref[i];
          a = {
            id: item.productId,
            sku: item.productSlug,
            name: item.productName,
            quantity: item.quantity,
            price: parseFloat(item.price / 100)
          };
          if (_this.opts.analyticsProductTransform != null) {
            a = _this.opts.analyticsProductTransform(a);
          }
          options.products[i] = a;
        }
        analytics.track('Completed Order', options);
        return {
          p: p
        };
      };
    })(this));
  };

  return Cart;

})();

module.exports = Cart;

//# sourceMappingURL=cart.js.map
