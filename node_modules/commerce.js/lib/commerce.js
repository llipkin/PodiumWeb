'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

// src/polyfills.coffee
if (!Array.prototype.filter) {
  Array.prototype.filter = function(func, thisArg) {
    var c, i, len, res, t;
    if (!((typeof func === 'Function' || typeof func === 'function') && this)) {
      throw new TypeError;
    }
    len = this.length >>> 0;
    res = new Array(len);
    t = this;
    c = 0;
    i = -1;
    if (thisArg === void 0) {
      while (++i !== len) {
        if (i in this) {
          if (func(t[i], i, t)) {
            res[c++] = t[i];
          }
        }
      }
    } else {
      while (++i !== len) {
        if (i in this) {
          if (func.call(thisArg, t[i], i, t)) {
            res[c++] = t[i];
          }
        }
      }
    }
    res.length = c;
    return res;
  };
}

// src/analytics.coffee
var analytics;

var analytics$1 = analytics = {
  track: function(event, data) {
    var err;
    if ((typeof window !== "undefined" && window !== null ? window.analytics : void 0) != null) {
      try {
        return window.analytics.track(event, data);
      } catch (error) {
        err = error;
        return console.error(err);
      }
    }
  }
};

// node_modules/broken/lib/broken.mjs
// src/promise-inspection.coffee
var PromiseInspection;

var PromiseInspection$1 = PromiseInspection = (function() {
  function PromiseInspection(arg) {
    this.state = arg.state, this.value = arg.value, this.reason = arg.reason;
  }

  PromiseInspection.prototype.isFulfilled = function() {
    return this.state === 'fulfilled';
  };

  PromiseInspection.prototype.isRejected = function() {
    return this.state === 'rejected';
  };

  return PromiseInspection;

})();

// src/utils.coffee
var _undefined$1 = void 0;

var _undefinedString$1 = 'undefined';

// src/soon.coffee
var soon;

soon = (function() {
  var bufferSize, callQueue, cqYield, fq, fqStart;
  fq = [];
  fqStart = 0;
  bufferSize = 1024;
  callQueue = function() {
    var err;
    while (fq.length - fqStart) {
      try {
        fq[fqStart]();
      } catch (error) {
        err = error;
        if (typeof console !== 'undefined') {
          console.error(err);
        }
      }
      fq[fqStart++] = _undefined$1;
      if (fqStart === bufferSize) {
        fq.splice(0, bufferSize);
        fqStart = 0;
      }
    }
  };
  cqYield = (function() {
    var dd, mo;
    if (typeof MutationObserver !== _undefinedString$1) {
      dd = document.createElement('div');
      mo = new MutationObserver(callQueue);
      mo.observe(dd, {
        attributes: true
      });
      return function() {
        dd.setAttribute('a', 0);
      };
    }
    if (typeof setImmediate !== _undefinedString$1) {
      return function() {
        setImmediate(callQueue);
      };
    }
    return function() {
      setTimeout(callQueue, 0);
    };
  })();
  return function(fn) {
    fq.push(fn);
    if (fq.length - fqStart === 1) {
      cqYield();
    }
  };
})();

var soon$1 = soon;

// src/promise.coffee
var Promise$1;
var STATE_FULFILLED;
var STATE_PENDING;
var STATE_REJECTED;
var _undefined;
var rejectClient;
var resolveClient;

_undefined = void 0;

STATE_PENDING = _undefined;

STATE_FULFILLED = 'fulfilled';

STATE_REJECTED = 'rejected';

resolveClient = function(c, arg) {
  var err, yret;
  if (typeof c.y === 'function') {
    try {
      yret = c.y.call(_undefined, arg);
      c.p.resolve(yret);
    } catch (error) {
      err = error;
      c.p.reject(err);
    }
  } else {
    c.p.resolve(arg);
  }
};

rejectClient = function(c, reason) {
  var err, yret;
  if (typeof c.n === 'function') {
    try {
      yret = c.n.call(_undefined, reason);
      c.p.resolve(yret);
    } catch (error) {
      err = error;
      c.p.reject(err);
    }
  } else {
    c.p.reject(reason);
  }
};

Promise$1 = (function() {
  function Promise(fn) {
    if (fn) {
      fn((function(_this) {
        return function(arg) {
          return _this.resolve(arg);
        };
      })(this), (function(_this) {
        return function(arg) {
          return _this.reject(arg);
        };
      })(this));
    }
  }

  Promise.prototype.resolve = function(value) {
    var clients, err, first, next;
    if (this.state !== STATE_PENDING) {
      return;
    }
    if (value === this) {
      return this.reject(new TypeError('Attempt to resolve promise with self'));
    }
    if (value && (typeof value === 'function' || typeof value === 'object')) {
      try {
        first = true;
        next = value.then;
        if (typeof next === 'function') {
          next.call(value, (function(_this) {
            return function(ra) {
              if (first) {
                if (first) {
                  first = false;
                }
                _this.resolve(ra);
              }
            };
          })(this), (function(_this) {
            return function(rr) {
              if (first) {
                first = false;
                _this.reject(rr);
              }
            };
          })(this));
          return;
        }
      } catch (error) {
        err = error;
        if (first) {
          this.reject(err);
        }
        return;
      }
    }
    this.state = STATE_FULFILLED;
    this.v = value;
    if (clients = this.c) {
      soon$1((function(_this) {
        return function() {
          var c, i, len;
          for (i = 0, len = clients.length; i < len; i++) {
            c = clients[i];
            resolveClient(c, value);
          }
        };
      })(this));
    }
  };

  Promise.prototype.reject = function(reason) {
    var clients;
    if (this.state !== STATE_PENDING) {
      return;
    }
    this.state = STATE_REJECTED;
    this.v = reason;
    if (clients = this.c) {
      soon$1(function() {
        var c, i, len;
        for (i = 0, len = clients.length; i < len; i++) {
          c = clients[i];
          rejectClient(c, reason);
        }
      });
    } else if (!Promise.suppressUncaughtRejectionError && typeof console !== 'undefined') {
      console.log('Broken Promise, please catch rejections: ', reason, reason ? reason.stack : null);
    }
  };

  Promise.prototype.then = function(onFulfilled, onRejected) {
    var a, client, p, s;
    p = new Promise;
    client = {
      y: onFulfilled,
      n: onRejected,
      p: p
    };
    if (this.state === STATE_PENDING) {
      if (this.c) {
        this.c.push(client);
      } else {
        this.c = [client];
      }
    } else {
      s = this.state;
      a = this.v;
      soon$1(function() {
        if (s === STATE_FULFILLED) {
          resolveClient(client, a);
        } else {
          rejectClient(client, a);
        }
      });
    }
    return p;
  };

  Promise.prototype["catch"] = function(cfn) {
    return this.then(null, cfn);
  };

  Promise.prototype["finally"] = function(cfn) {
    return this.then(cfn, cfn);
  };

  Promise.prototype.timeout = function(ms, msg) {
    msg = msg || 'timeout';
    return new Promise((function(_this) {
      return function(resolve, reject) {
        setTimeout(function() {
          return reject(Error(msg));
        }, ms);
        _this.then(function(val) {
          resolve(val);
        }, function(err) {
          reject(err);
        });
      };
    })(this));
  };

  Promise.prototype.callback = function(cb) {
    if (typeof cb === 'function') {
      this.then(function(val) {
        return cb(null, val);
      });
      this["catch"](function(err) {
        return cb(err, null);
      });
    }
    return this;
  };

  return Promise;

})();

var Promise$2 = Promise$1;

// src/helpers.coffee
var resolve = function(val) {
  var z;
  z = new Promise$2;
  z.resolve(val);
  return z;
};

var reject = function(err) {
  var z;
  z = new Promise$2;
  z.reject(err);
  return z;
};

var all = function(ps) {
  var i, j, len, p, rc, resolvePromise, results, retP;
  results = [];
  rc = 0;
  retP = new Promise$2();
  resolvePromise = function(p, i) {
    if (!p || typeof p.then !== 'function') {
      p = resolve(p);
    }
    p.then(function(yv) {
      results[i] = yv;
      rc++;
      if (rc === ps.length) {
        retP.resolve(results);
      }
    }, function(nv) {
      retP.reject(nv);
    });
  };
  for (i = j = 0, len = ps.length; j < len; i = ++j) {
    p = ps[i];
    resolvePromise(p, i);
  }
  if (!ps.length) {
    retP.resolve(results);
  }
  return retP;
};

var reflect = function(promise) {
  return new Promise$2(function(resolve, reject) {
    return promise.then(function(value) {
      return resolve(new PromiseInspection$1({
        state: 'fulfilled',
        value: value
      }));
    })["catch"](function(err) {
      return resolve(new PromiseInspection$1({
        state: 'rejected',
        reason: err
      }));
    });
  });
};

var settle = function(promises) {
  return all(promises.map(reflect));
};

// src/index.coffee
Promise$2.all = all;

Promise$2.reflect = reflect;

Promise$2.reject = reject;

Promise$2.resolve = resolve;

Promise$2.settle = settle;

Promise$2.soon = soon$1;

// node_modules/es-object-assign/lib/es-object-assign.mjs
// src/index.coffee
var getOwnSymbols;
var objectAssign;
var shouldUseNative;
var toObject;
var slice = [].slice;

getOwnSymbols = Object.getOwnPropertySymbols;

toObject = function(val) {
  if (val === null || val === void 0) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }
  return Object(val);
};

shouldUseNative = function() {
  var i, j, k, len, letter, order2, ref, test1, test2, test3;
  try {
    if (!Object.assign) {
      return false;
    }
    test1 = new String('abc');
    test1[5] = 'de';
    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    }
    test2 = {};
    for (i = j = 0; j <= 9; i = ++j) {
      test2['_' + String.fromCharCode(i)] = i;
    }
    order2 = Object.getOwnPropertyNames(test2).map(function(n) {
      return test2[n];
    });
    if (order2.join('') !== '0123456789') {
      return false;
    }
    test3 = {};
    ref = 'abcdefghijklmnopqrst'.split('');
    for (k = 0, len = ref.length; k < len; k++) {
      letter = ref[k];
      test3[letter] = letter;
    }
    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }
    return true;
  } catch (error) {
    return false;
  }
};

var index = objectAssign = (function() {
  if (shouldUseNative()) {
    return Object.assign;
  }
  return function() {
    var from, j, k, key, len, len1, ref, source, sources, symbol, target, to;
    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    to = toObject(target);
    for (j = 0, len = sources.length; j < len; j++) {
      source = sources[j];
      from = Object(source);
      for (key in from) {
        if (Object.prototype.hasOwnProperty.call(from, key)) {
          to[key] = from[key];
        }
      }
      if (getOwnSymbols) {
        ref = getOwnSymbols(from);
        for (k = 0, len1 = ref.length; k < len1; k++) {
          symbol = ref[k];
          if (Object.prototype.propIsEnumerable.call(from, symbol)) {
            to[symbol] = from[symbol];
          }
        }
      }
    }
    return to;
  };
})();

// src/util.coffee
var clean = function(str) {
  if (str == null) {
    str = '';
  }
  return str.toUpperCase().replace(/\s/g, '');
};

var matchesGeoRate = function(g, country, state, city, postalCode) {
  var code, codes, ct, ctr, j, len, pc, st;
  ctr = clean(country);
  st = clean(state);
  ct = clean(city);
  pc = clean(postalCode);
  if (!ctr || !st || (!ct && !pc)) {
    return [false, 0];
  }
  if (!g.country) {
    return [true, 0];
  }
  if (g.country === ctr) {
    if (!g.state) {
      return [true, 1];
    }
    if (g.state === st) {
      if (!g.city && !g.postalCodes) {
        return [true, 2];
      }
      if (g.city && g.city === ct) {
        return [true, 3];
      }
      if (g.postalCodes) {
        codes = g.postalCodes.split(',');
        for (j = 0, len = codes.length; j < len; j++) {
          code = codes[j];
          if (code === pc) {
            return [true, 3];
          }
        }
      }
      return [false, 2];
    }
    return [false, 1];
  }
  return [false, 0];
};

var closestGeoRate = function(grs, ctr, st, ct, pc) {
  var currentLevel, gr, i, idx, isMatch, level, ref, retGr;
  retGr = null;
  currentLevel = -1;
  idx = -1;
  for (i in grs) {
    gr = grs[i];
    ref = matchesGeoRate(gr, ctr, st, ct, pc), isMatch = ref[0], level = ref[1];
    if (isMatch && level > currentLevel) {
      if (level === 3) {
        return [gr, level, parseInt(i, 10)];
      }
      retGr = grs[i];
      currentLevel = level;
      idx = i;
    }
  }
  return [retGr, currentLevel, parseInt(idx, 10)];
};

// src/cart.coffee
var Cart;

Cart = (function() {
  Cart.prototype.waits = 0;

  Cart.prototype.queue = null;

  Cart.prototype.data = null;

  Cart.prototype.client = null;

  Cart.prototype.promise = null;

  Cart.prototype.reject = null;

  Cart.prototype.resolve = null;

  Cart.prototype.opts = {};

  function Cart(client, data1, opts1) {
    this.client = client;
    this.data = data1;
    this.opts = opts1 != null ? opts1 : {};
    this.queue = [];
    this.data.on('set', (function(_this) {
      return function(name) {
        switch (name) {
          case 'order.mode':
            if (_this.inItemlessMode()) {
              return _this.clear();
            }
        }
      };
    })(this));
    this.invoice();
  }

  Cart.prototype.initCart = function() {
    var cartId, i, item, items, j, len;
    cartId = this.data.get('order.cartId');
    if (!cartId && (this.client.cart != null)) {
      this.client.cart.create().then((function(_this) {
        return function(cart) {
          var i, item, items, j, len;
          _this.data.set('order.cartId', cart.id);
          items = _this.data.get('order.items');
          for (i = j = 0, len = items.length; j < len; i = ++j) {
            item = items[i];
            _this._cartSet(item.productId, item.quantity);
          }
          return _this.onCart(cart.id);
        };
      })(this));
      return this.data.on('set', (function(_this) {
        return function(name) {
          switch (name) {
            case 'order.storeId':
              return _this._cartSyncStore();
          }
        };
      })(this));
    } else if (this.client.cart != null) {
      this.onCart(cartId);
      items = this.data.get('order.items');
      for (i = j = 0, len = items.length; j < len; i = ++j) {
        item = items[i];
        this._cartSet(item.productId, item.quantity);
      }
      this.onCart(cartId);
      return this.data.on('set', (function(_this) {
        return function(name) {
          if (name === 'order.storeId') {
            _this._cartSyncStore();
          }
          if (name === 'user.firstName') {
            _this._cartSyncName();
          }
          if (name === 'user.lastName') {
            _this._cartSyncName();
          }
          if (name === 'user.email') {
            return _this._cartSyncEmail();
          }
        };
      })(this));
    }
  };

  Cart.prototype.inItemlessMode = function() {
    var mode;
    mode = this.data.get('order.mode');
    return mode === 'deposit' || mode === 'contribution';
  };

  Cart.prototype.onCart = function(cartId) {};

  Cart.prototype._cartSet = function(id, quantity) {
    var cartId;
    cartId = this.data.get('order.cartId');
    if (cartId && (this.client.cart != null)) {
      return this.client.cart.set({
        id: cartId,
        productId: id,
        quantity: quantity,
        storeId: this.data.get('order.storeId')
      });
    }
  };

  Cart.prototype._cartUpdate = function(cart) {
    var cartId;
    cartId = this.data.get('order.cartId');
    if (cartId && (this.client.cart != null)) {
      cart.id = cartId;
      return this.client.cart.update(cart);
    }
  };

  Cart.prototype._cartSyncStore = function() {
    var cartId;
    cartId = this.data.get('order.cartId');
    if (cartId && (this.client.cart != null)) {
      return this.client.cart.update({
        id: cartId,
        storeId: this.data.get('order.storeId')
      });
    }
  };

  Cart.prototype._cartSyncName = function() {
    var cartId;
    cartId = this.data.get('order.cartId');
    if (cartId && (this.client.cart != null)) {
      return this.client.cart.update({
        id: cartId,
        name: this.data.get('user.firstName') + ' ' + this.data.get('user.lastName')
      });
    }
  };

  Cart.prototype._cartSyncEmail = function() {
    var cartId;
    cartId = this.data.get('order.cartId');
    if (cartId && (this.client.cart != null)) {
      return this.client.cart.update({
        id: cartId,
        email: this.data.get('user.email')
      });
    }
  };

  Cart.prototype.clear = function() {
    var item, items, itemsClone, j, len;
    this.queue.length = 0;
    items = this.data.get('order.items');
    itemsClone = items.slice(0);
    for (j = 0, len = itemsClone.length; j < len; j++) {
      item = itemsClone[j];
      this.set(item.productId, 0);
    }
    return this.data.get('order.items');
  };

  Cart.prototype.set = function(id, quantity, locked, ignore) {
    if (locked == null) {
      locked = false;
    }
    if (ignore == null) {
      ignore = false;
    }
    this.queue.push([id, quantity, locked, ignore]);
    if (this.queue.length === 1) {
      this.promise = new Promise$2((function(_this) {
        return function(resolve, reject) {
          _this.resolve = resolve;
          return _this.reject = reject;
        };
      })(this));
      this._set();
    }
    return this.promise;
  };

  Cart.prototype.get = function(id) {
    var i, item, items, j, k, len, len1, ref;
    items = this.data.get('order.items');
    for (i = j = 0, len = items.length; j < len; i = ++j) {
      item = items[i];
      if (item.id !== id && item.productId !== id && item.productSlug !== id) {
        continue;
      }
      return item;
    }
    ref = this.queue;
    for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
      item = ref[i];
      if (item[0] !== id) {
        continue;
      }
      return {
        id: item[0],
        quantity: item[2],
        locked: item[3],
        ignore: item[4]
      };
    }
  };

  Cart.prototype._set = function() {
    var a, deltaQuantity, i, id, ignore, item, items, j, k, len, len1, locked, newValue, oldValue, quantity, ref;
    items = this.data.get('order.items');
    if (this.queue.length === 0) {
      this.invoice();
      if (this.resolve != null) {
        this.resolve(items != null ? items : []);
      }
      return;
    }
    ref = this.queue[0], id = ref[0], quantity = ref[1], locked = ref[2], ignore = ref[3];
    if (this.inItemlessMode() && quantity > 0) {
      this.invoice();
      if (this.resolve != null) {
        this.resolve(items != null ? items : []);
      }
      return;
    }
    if (quantity < 0) {
      quantity = 0;
    }
    if (quantity === 0) {
      for (i = j = 0, len = items.length; j < len; i = ++j) {
        item = items[i];
        if (item.productId === id || item.productSlug === id || item.id === id) {
          break;
        }
      }
      if (i < items.length) {
        this.data.set('order.items', []);
        items.splice(i, 1);
        this.onUpdate();
        a = {
          id: item.productId,
          sku: item.productSlug,
          name: item.productName,
          quantity: item.quantity,
          price: parseFloat(item.price / 100)
        };
        if (this.opts.analyticsProductTransform != null) {
          a = this.opts.analyticsProductTransform(a);
        }
        analytics$1.track('Removed Product', a);
        this.data.set('order.items', items);
        this._cartSet(item.productId, 0);
        item.quantity = 0;
        this.onUpdate(item);
      }
      this.queue.shift();
      this._set();
      return;
    }
    for (i = k = 0, len1 = items.length; k < len1; i = ++k) {
      item = items[i];
      if (item.id !== id && item.productId !== id && item.productSlug !== id) {
        continue;
      }
      oldValue = item.quantity;
      item.quantity = quantity;
      item.locked = locked;
      item.ignore = ignore;
      newValue = quantity;
      deltaQuantity = newValue - oldValue;
      if (deltaQuantity > 0) {
        a = {
          id: item.productId,
          sku: item.productSlug,
          name: item.productName,
          quantity: deltaQuantity,
          price: parseFloat(item.price / 100)
        };
        if (this.opts.analyticsProductTransform != null) {
          a = this.opts.analyticsProductTransform(a);
        }
        analytics$1.track('Added Product', a);
      } else if (deltaQuantity < 0) {
        a = {
          id: item.productId,
          sku: item.productSlug,
          name: item.productName,
          quantity: deltaQuantity,
          price: parseFloat(item.price / 100)
        };
        if (this.opts.analyticsProductTransform != null) {
          a = this.opts.analyticsProductTransform(a);
        }
        analytics$1.track('Removed Product', a);
      }
      this.data.set('order.items.' + i + '.quantity', quantity);
      this.data.set('order.items.' + i + '.locked', locked);
      this.data.set('order.items.' + i + '.ignore', ignore);
      this._cartSet(item.productId, quantity);
      this.onUpdate(item);
      this.queue.shift();
      this._set();
      return;
    }
    items.push({
      id: id,
      quantity: quantity,
      locked: locked,
      ignore: ignore
    });
    this.waits++;
    return this.load(id);
  };

  Cart.prototype.load = function(id) {
    return this.client.product.get(id).then((function(_this) {
      return function(product) {
        var a, i, item, items, j, len;
        _this.waits--;
        items = _this.data.get('order.items');
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          if (product.id === item.id || product.slug === item.id) {
            a = {
              id: product.id,
              sku: product.slug,
              name: product.name,
              quantity: item.quantity,
              price: parseFloat(product.price / 100)
            };
            if (_this.opts.analyticsProductTransform != null) {
              a = _this.opts.analyticsProductTransform(a);
            }
            analytics$1.track('Added Product', a);
            _this.update(product, item);
            _this.data.set('order.items.' + i, item);
            _this._cartSet(product.id, item.quantity);
            break;
          }
        }
        _this.queue.shift();
        return _this._set();
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        var i, item, items, j, len;
        _this.waits--;
        console.log("setItem Error: " + err.stack);
        items = _this.data.get('order.items');
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          if (item.id === id) {
            items.splice(i, 1);
            _this.data.set('order.items', items);
            break;
          }
        }
        _this.queue.shift();
        return _this._set();
      };
    })(this));
  };

  Cart.prototype.refresh = function(id) {
    var items;
    items = this.data.get('order.items');
    return this.client.product.get(id).then((function(_this) {
      return function(product) {
        var i, item, j, len;
        _this.waits--;
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          if (product.id === item.productId || product.slug === item.productSlug) {
            _this.update(product, item);
            break;
          }
        }
        return items;
      };
    })(this))["catch"](function(err) {
      return console.log("setItem Error: " + err);
    });
  };

  Cart.prototype.update = function(product, item) {
    delete item.id;
    item.productId = product.id;
    item.productSlug = product.slug;
    item.productName = product.name;
    item.price = product.price;
    item.listPrice = product.listPrice;
    item.description = product.description;
    item.isSubscribeable = product.isSubscribeable;
    item.interval = product.interval;
    item.intervalCount = product.intervalCount;
    return this.onUpdate(item);
  };

  Cart.prototype.onUpdate = function(item) {};

  Cart.prototype.promoCode = function(promoCode) {
    if (promoCode != null) {
      this.invoice();
      return this.client.coupon.get(promoCode).then((function(_this) {
        return function(coupon) {
          if (coupon.enabled) {
            _this.data.set('order.coupon', coupon);
            _this.data.set('order.couponCodes', [promoCode]);
            _this._cartUpdate({
              coupon: coupon,
              couponCodes: [promoCode]
            });
            if (coupon.freeProductId !== "" && coupon.freeQuantity > 0) {
              return _this.client.product.get(coupon.freeProductId).then(function(freeProduct) {
                return _this.invoice();
              })["catch"](function(err) {
                throw new Error('This coupon is invalid.');
              });
            } else {
              _this.invoice();
            }
          } else {
            throw new Error('This code is expired.');
          }
        };
      })(this));
    }
    return this.data.get('order.promoCode');
  };

  Cart.prototype.taxRates = function(taxRates) {
    if (taxRates != null) {
      this.data.set('taxRates', taxRates);
      this.invoice();
    }
    return this.data.get('taxRates');
  };

  Cart.prototype.shippingRates = function(shippingRates) {
    if (shippingRates != null) {
      this.data.set('shippingRates', shippingRates);
      this.invoice();
    }
    return this.data.get('shippingRates');
  };

  Cart.prototype.invoice = function() {
    var city, country, coupon, discount, gr, i, item, items, j, k, l, len, len1, len2, len3, m, n, postalCode, quantity, rate, ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, shipping, shippingRate, shippingRates, state, subtotal, tax, taxRate, taxRates;
    if (this.inItemlessMode()) {
      subtotal = (ref = this.data.get('order.subtotal')) != null ? ref : 0;
      this.data.set('order.subtotal', subtotal);
      this.data.set('order.total', subtotal);
      return;
    }
    items = this.data.get('order.items');
    discount = 0;
    coupon = this.data.get('order.coupon');
    if (coupon != null) {
      switch (coupon.type) {
        case 'flat':
          if ((coupon.productId == null) || coupon.productId === '') {
            discount = coupon.amount || 0;
          } else {
            ref1 = this.data.get('order.items');
            for (j = 0, len = ref1.length; j < len; j++) {
              item = ref1[j];
              if (item.productId === coupon.productId) {
                quantity = item.quantity;
                if (coupon.once) {
                  quantity = 1;
                }
                discount += (coupon.amount || 0) * quantity;
              }
            }
          }
          break;
        case 'percent':
          if ((coupon.productId == null) || coupon.productId === '') {
            ref2 = this.data.get('order.items');
            for (k = 0, len1 = ref2.length; k < len1; k++) {
              item = ref2[k];
              quantity = item.quantity;
              if (coupon.once) {
                quantity = 1;
              }
              discount += (coupon.amount || 0) * item.price * quantity * 0.01;
            }
          } else {
            ref3 = this.data.get('order.items');
            for (m = 0, len2 = ref3.length; m < len2; m++) {
              item = ref3[m];
              if (item.productId === coupon.productId) {
                quantity = item.quantity;
                if (coupon.once) {
                  quantity = 1;
                }
                discount += (coupon.amount || 0) * item.price * quantity * 0.01;
              }
            }
          }
          discount = Math.floor(discount);
      }
    }
    this.data.set('order.discount', discount);
    items = this.data.get('order.items');
    subtotal = -discount;
    for (n = 0, len3 = items.length; n < len3; n++) {
      item = items[n];
      subtotal += item.price * item.quantity;
    }
    this.data.set('order.subtotal', subtotal);
    taxRates = this.data.get('taxRates');
    rate = this.data.get('order.taxRate');
    if (rate == null) {
      rate = {
        percent: 0,
        cost: 0
      };
      this.data.set('order.taxRate', rate);
    }
    if (taxRates != null) {
      country = this.data.get('order.shippingAddress.country');
      state = this.data.get('order.shippingAddress.state');
      city = this.data.get('order.shippingAddress.city');
      postalCode = this.data.get('order.shippingAddress.postalCode');
      ref4 = closestGeoRate(taxRates.geoRates, country, state, city, postalCode), gr = ref4[0], l = ref4[1], i = ref4[2];
      if (gr == null) {
        gr = rate;
      }
      this.data.set('order.taxRate', gr);
    }
    shippingRates = this.data.get('shippingRates');
    rate = this.data.get('order.shippingRate');
    if (rate == null) {
      rate = {
        percent: 0,
        cost: 0
      };
      this.data.set('order.shippingRate', rate);
    }
    if (shippingRates != null) {
      country = this.data.get('order.shippingAddress.country');
      state = this.data.get('order.shippingAddress.state');
      city = this.data.get('order.shippingAddress.city');
      postalCode = this.data.get('order.shippingAddress.postalCode');
      ref5 = closestGeoRate(shippingRates.geoRates, country, state, city, postalCode), gr = ref5[0], l = ref5[1], i = ref5[2];
      if (gr == null) {
        gr = rate;
      }
      this.data.set('order.shippingRate', gr);
    }
    taxRate = (ref6 = this.data.get('order.taxRate')) != null ? ref6 : {
      percent: 0,
      cost: 0
    };
    tax = Math.ceil(((ref7 = taxRate.percent) != null ? ref7 : 0) * subtotal + ((ref8 = taxRate.cost) != null ? ref8 : 0));
    shippingRate = (ref9 = this.data.get('order.shippingRate')) != null ? ref9 : {
      percent: 0,
      cost: 0
    };
    shipping = Math.ceil(((ref10 = shippingRate.percent) != null ? ref10 : 0) * subtotal + ((ref11 = shippingRate.cost) != null ? ref11 : 0));
    this.data.set('order.shipping', shipping);
    this.data.set('order.tax', tax);
    return this.data.set('order.total', subtotal + shipping + tax);
  };

  Cart.prototype.checkout = function(opts, authOnly) {
    var data, newOrder, ref;
    if (opts == null) {
      opts = {};
    }
    if (authOnly == null) {
      authOnly = false;
    }
    this.invoice();
    newOrder = index({}, this.data.get('order'));
    newOrder.items = ((ref = this.data.get('order.items')) != null ? ref : []).slice(0);
    newOrder.items = newOrder.items.filter(function(item) {
      return !item.ignore;
    });
    data = index({}, opts, {
      user: this.data.get('user'),
      order: newOrder,
      payment: this.data.get('payment')
    });
    return this.client.checkout.authorize(data).then((function(_this) {
      return function(order) {
        var a, i, item, items, j, len, options, p, p2, ref1, ref2, referralProgram;
        if (order == null) {
          throw 'Error authorizing order, please try again later.';
        }
        _this.data.set('coupon', _this.data.get('order.coupon') || {});
        items = ((ref1 = _this.data.get('order.items')) != null ? ref1 : []).slice(0);
        _this.data.set('order', order);
        _this.data.set('order.items', items);
        if (order.type === 'ethereum' || order.type === 'bitcoin' || authOnly) {
          p = new Promise$2(function(resolve) {
            return resolve(order);
          });
        } else {
          p = _this.capture(opts).p;
        }
        referralProgram = _this.data.get('referralProgram');
        if (referralProgram != null) {
          p2 = _this.client.referrer.create({
            userId: _this.data.get('order.userId'),
            orderId: _this.data.get('order.id'),
            program: referralProgram,
            programId: _this.data.get('referralProgram.id')
          })["catch"](function(err) {
            var ref2;
            if (typeof window !== "undefined" && window !== null) {
              if ((ref2 = window.Raven) != null) {
                ref2.captureException(err);
              }
            }
            return console.log("new referralProgram Error: " + err);
          });
          p = Promise$2.settle([p, p2]).then(function(pis) {
            var referrer;
            order = pis[0].value;
            referrer = pis[1].value;
            _this.data.set('referrerId', referrer.id);
            return order;
          })["catch"](function(err) {
            var ref2;
            if (typeof window !== "undefined" && window !== null) {
              if ((ref2 = window.Raven) != null) {
                ref2.captureException(err);
              }
            }
            return console.log("order/referralProgram Error: " + err);
          });
        }
        options = {
          orderId: _this.data.get('order.id'),
          total: parseFloat(_this.data.get('order.total') / 100),
          shipping: parseFloat(_this.data.get('order.shipping') / 100),
          tax: parseFloat(_this.data.get('order.tax') / 100),
          discount: parseFloat(_this.data.get('order.discount') / 100),
          coupon: _this.data.get('order.couponCodes.0') || '',
          currency: _this.data.get('order.currency'),
          products: []
        };
        ref2 = _this.data.get('order.items');
        for (i = j = 0, len = ref2.length; j < len; i = ++j) {
          item = ref2[i];
          a = {
            id: item.productId,
            sku: item.productSlug,
            name: item.productName,
            quantity: item.quantity,
            price: parseFloat(item.price / 100)
          };
          if (_this.opts.analyticsProductTransform != null) {
            a = _this.opts.analyticsProductTransform(a);
          }
          options.products[i] = a;
        }
        analytics$1.track('Completed Order', options);
        return {
          p: p
        };
      };
    })(this));
  };

  Cart.prototype.authorize = function() {
    return this.checkout({}, true);
  };

  Cart.prototype.capture = function(opts) {
    var data, order, p;
    order = this.data.get('order');
    if (!order.id) {
      p = new Promise$2(function(resolve, reject) {
        return reject(new Error('Order has no id, did you authorize?'));
      });
    } else {
      data = index({}, opts, {
        orderId: order.id
      });
      p = this.client.checkout.capture(data).then((function(_this) {
        return function(order) {
          var items;
          if (order == null) {
            throw 'Error capturing order, please try again later.';
          }
          items = _this.data.get('order.items').slice(0);
          _this.data.set('order', order);
          _this.data.set('order.items', items);
          _this.invoice();
          return order;
        };
      })(this))["catch"](function(err) {
        var ref;
        if (typeof window !== "undefined" && window !== null) {
          if ((ref = window.Raven) != null) {
            ref.captureException(err);
          }
        }
        return console.log("capture error: " + err);
      });
    }
    return {
      p: p
    };
  };

  return Cart;

})();

var Cart$1 = Cart;

// src/index.coffee

exports.Cart = Cart$1;
exports.matchesGeoRate = matchesGeoRate;
exports.closestGeoRate = closestGeoRate;
exports.clean = clean;
//# sourceMappingURL=commerce.js.map
